<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.demo.mapper.DetailquesMapper">
  <resultMap id="BaseResultMap" type="com.demo.model.Detailques">
    <id column="did" jdbcType="INTEGER" property="did" />
    <result column="wrongQues" jdbcType="INTEGER" property="wrongques" />
    <result column="store" jdbcType="INTEGER" property="store" />
    <result column="iscorrect" jdbcType="INTEGER" property="iscorrect" />
    <result column="transmit" jdbcType="INTEGER" property="transmit" />
    <result column="qid" jdbcType="INTEGER" property="qid" />
    <result column="uid" jdbcType="VARCHAR" property="uid" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    did, wrongQues, store, iscorrect, transmit, qid, uid
  </sql>
  <select id="selectByExample" parameterType="com.demo.model.DetailquesExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from detailques
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from detailques
    where did = #{did,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from detailques
    where did = #{did,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.demo.model.DetailquesExample">
    delete from detailques
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.demo.model.Detailques">
    insert into detailques (did, wrongQues, store, 
      iscorrect, transmit, qid, 
      uid)
    values (#{did,jdbcType=INTEGER}, #{wrongques,jdbcType=INTEGER}, #{store,jdbcType=INTEGER}, 
      #{iscorrect,jdbcType=INTEGER}, #{transmit,jdbcType=INTEGER}, #{qid,jdbcType=INTEGER}, 
      #{uid,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.demo.model.Detailques">
    insert into detailques
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="did != null">
        did,
      </if>
      <if test="wrongques != null">
        wrongQues,
      </if>
      <if test="store != null">
        store,
      </if>
      <if test="iscorrect != null">
        iscorrect,
      </if>
      <if test="transmit != null">
        transmit,
      </if>
      <if test="qid != null">
        qid,
      </if>
      <if test="uid != null">
        uid,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="did != null">
        #{did,jdbcType=INTEGER},
      </if>
      <if test="wrongques != null">
        #{wrongques,jdbcType=INTEGER},
      </if>
      <if test="store != null">
        #{store,jdbcType=INTEGER},
      </if>
      <if test="iscorrect != null">
        #{iscorrect,jdbcType=INTEGER},
      </if>
      <if test="transmit != null">
        #{transmit,jdbcType=INTEGER},
      </if>
      <if test="qid != null">
        #{qid,jdbcType=INTEGER},
      </if>
      <if test="uid != null">
        #{uid,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.demo.model.DetailquesExample" resultType="java.lang.Long">
    select count(*) from detailques
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update detailques
    <set>
      <if test="record.did != null">
        did = #{record.did,jdbcType=INTEGER},
      </if>
      <if test="record.wrongques != null">
        wrongQues = #{record.wrongques,jdbcType=INTEGER},
      </if>
      <if test="record.store != null">
        store = #{record.store,jdbcType=INTEGER},
      </if>
      <if test="record.iscorrect != null">
        iscorrect = #{record.iscorrect,jdbcType=INTEGER},
      </if>
      <if test="record.transmit != null">
        transmit = #{record.transmit,jdbcType=INTEGER},
      </if>
      <if test="record.qid != null">
        qid = #{record.qid,jdbcType=INTEGER},
      </if>
      <if test="record.uid != null">
        uid = #{record.uid,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update detailques
    set did = #{record.did,jdbcType=INTEGER},
      wrongQues = #{record.wrongques,jdbcType=INTEGER},
      store = #{record.store,jdbcType=INTEGER},
      iscorrect = #{record.iscorrect,jdbcType=INTEGER},
      transmit = #{record.transmit,jdbcType=INTEGER},
      qid = #{record.qid,jdbcType=INTEGER},
      uid = #{record.uid,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.demo.model.Detailques">
    update detailques
    <set>
      <if test="wrongques != null">
        wrongQues = #{wrongques,jdbcType=INTEGER},
      </if>
      <if test="store != null">
        store = #{store,jdbcType=INTEGER},
      </if>
      <if test="iscorrect != null">
        iscorrect = #{iscorrect,jdbcType=INTEGER},
      </if>
      <if test="transmit != null">
        transmit = #{transmit,jdbcType=INTEGER},
      </if>
      <if test="qid != null">
        qid = #{qid,jdbcType=INTEGER},
      </if>
      <if test="uid != null">
        uid = #{uid,jdbcType=VARCHAR},
      </if>
    </set>
    where did = #{did,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.demo.model.Detailques">
    update detailques
    set wrongQues = #{wrongques,jdbcType=INTEGER},
      store = #{store,jdbcType=INTEGER},
      iscorrect = #{iscorrect,jdbcType=INTEGER},
      transmit = #{transmit,jdbcType=INTEGER},
      qid = #{qid,jdbcType=INTEGER},
      uid = #{uid,jdbcType=VARCHAR}
    where did = #{did,jdbcType=INTEGER}
  </update>
</mapper>